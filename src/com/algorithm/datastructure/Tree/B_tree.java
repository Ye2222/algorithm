package com.algorithm.datastructure.Tree;

public class B_tree {
    /* B 树的介绍
    B-tree 树即 B 树， B 即 Balanced， 平衡的意思。
    1) B 树的阶： 节点的最多子节点个数。 比如 2-3 树的阶是 3， 2-3-4 树的阶是 4
    2) B-树的搜索， 从根结点开始， 对结点内的关键字（有序） 序列进行二分查找，
    如果命中则结束， 否则进入查询关键字所属范围的儿子结点；
    重复， 直到所对应的儿子指针为空， 或已经是叶子结点
    3) 关键字集合分布在整颗树中, 即叶子节点和非叶子节点都存放数据.
    4) 搜索有可能在非叶子结点结束
    5) 其搜索性能等价于在关键字全集内做一次二分查找
     */

    /* B+树
    B+树是 B 树的变体， 也是一种多路搜索树
    1) B+树的搜索与 B 树也基本相同， 区别是 B+树只有达到叶子结点才命中（B 树可以在非叶子结点命中），
    其性能也等价于在关键字全集做一次二分查找
    2) 所有关键字都出现在叶子结点的链表中（即数据只能在叶子节点【也叫稠密索引】 ），且链表中的关键字(数据)
    恰好是有序的。
    3) 不可能在非叶子结点命中
    4) 非叶子结点相当于是叶子结点的索引（稀疏索引） ， 叶子结点相当于是存储（关键字） 数据的数据层
    5) 更适合文件索引系统
    6) B 树和 B+树各有自己的应用场景， 不能说 B+树完全比 B 树好， 反之亦然
     */
}
